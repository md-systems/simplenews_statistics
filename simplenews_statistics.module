<?php

/**
 * @file
 * Main simplenews statistics file.
 */

/**
 * @todo: Find a way to use simplenews' message caching (token replacement).
 */

/**
 * Implements hook_menu().
 */
function simplenews_statistics_menu() {
  // Admin.
  $items['admin/config/services/simplenews/statistics'] = array(
    'title' => 'Statistics',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_statistics_admin_settings_form'),
    'access arguments' => array('administer newsletter statistics'),
    'file' => 'includes/simplenews_statistics.admin.inc',
  );
  $items['admin/config/services/simplenews/statistics/settings'] = array(
    'title' => 'Settings',
    'weight' => -15,
    'type' => MENU_DEFAULT_LOCAL_TASK, // Visible once submodules are enabled.
  );
  // Statistics.
  $items['node/%node/simplenews_statistics'] = array(
    'title' => 'Statistics',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'simplenews_statistics_node_tab_page',
    'page arguments' => array(1),
    'access arguments' => array('view newsletter statistics', 1),
    'access callback' => 'simplenews_statistics_node_tab_access',
    'file' => 'includes/simplenews_statistics.pages.inc',
    'weight' => 1,
  );
  // Tracking.
  $items['track/open/%/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'simplenews_statistics_open_page',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
    'file' => 'includes/simplenews_statistics.pages.inc',
  );
  $items['track/click/%/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'simplenews_statistics_click_page',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
    'file' => 'includes/simplenews_statistics.pages.inc',
  );

  return $items;
}

/**
 * Access callback for statistics page.
 */
function simplenews_statistics_node_tab_access($permission, $node) {
  return simplenews_check_node_types($node->type) && user_access($permission);
}

/**
 * Implements hook_menu_alter().
 */
function simplenews_statistics_menu_alter(&$items) {
  // Set an access callback function for simplenews statistics' default views.
  $items['node/%/simplenews_statistics/opens']['access callback'] = 'simplenews_statistics_view_tab_access';
  $items['node/%/simplenews_statistics/clicks']['access callback'] = 'simplenews_statistics_view_tab_access';
}

/**
 * Access callback used by the statistics view page displays to determine if
 * the local task menu tabs should be displayed.
 */
function simplenews_statistics_view_tab_access($options = array()) {
  // Check if user has permission to view this display.
  $access_callback = $options[0];
  $access_arguments = $options[1];
  $access = call_user_func_array($access_callback, $access_arguments);

  // Show statistics tab only if the node type is 'simplenews'.
  $node = node_load(arg(1));
  if ($node && $node->type == 'simplenews' && $access) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_module_implements_alter().
 */
function simplenews_statistics_module_implements_alter(&$implementations, $hook) {
  // When the implementations of hook_menu_alter are called, we need this module
  // to be called after views.
  if ($hook == 'menu_alter') {
    if (isset($implementations['simplenews_statistics'])) {
      unset($implementations['simplenews_statistics']);
      $implementations['simplenews_statistics'] = FALSE;
    }
  }
}

/**
 * Implements hook_permission().
 */
function simplenews_statistics_permission() {
  $permissions = array(
    'administer newsletter statistics' => array(
      'title' => t('Administer newsletter statistics'),
      'description' => t('Allows user to administer newsletter statistics.'),
    ),
    'view newsletter statistics' => array(
      'title' => t('View newsletter statistics'),
      'description' => t('Allows user to access the statistics.'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_node_delete().
 */
function simplenews_statistics_node_delete($node) {
  if ($node->type == 'simplenews') {
    // Delete all click and open records for this newsletter.
    $url_query = db_select('simplenews_statistics_url', 'ssu')
      ->fields('ssu', array('urlid'))
      ->condition('ssu.nid', $node->nid);
    $result = $url_query->execute();

    $urlids = array();
    foreach ($result as $url_record) {
      $urlids[] = $url_record->urlid;
    }

    db_delete('simplenews_statistics_click')
      ->condition('urlid', $urlids)
      ->execute();
    db_delete('simplenews_statistics_open')
      ->condition('nid', $node->nid)
      ->execute();
    // Keep the URL records so links in the newsletter will still be clickable.
    // @todo Delete clicks and opens per subscriber when they are deleted.
  }
}


/**
 * Implements hook_views_api().
 */
function simplenews_statistics_views_api() {
  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'simplenews_statistics') . '/includes/views',
  );
}

/**
 * Implements hook_theme().
 */
function simplenews_statistics_theme() {
  return array(
    'simplenews_statistics' => array(
      'variables' => array('statistics' => NULL),
      'template' => 'simplenews-statistics',
      'path' => drupal_get_path('module', 'simplenews_statistics') . '/theme',
    ),
  );
}

/**
 * Implements hook_mail_alter().
 *
 * Parses all the links in the email so they can be tracked. Also adds a hidden
 * image to the body to track opens.
 */
function simplenews_statistics_mail_alter(&$message) {
  if (($message['id'] == 'simplenews_node' || $message['id'] == 'simplenews_test')) {
    $node = $message['params']['simplenews_source']->getNode();
    $subscriber = $message['params']['simplenews_source']->getSubscriber();

    // During testing the snid might be unset. Use 0 in that case. This will
    // make sure that the link will still work but won't be counted.
    $snid = isset($subscriber->snid) ? $subscriber->snid : 0;

    // Parse body.
    _simplenews_statistics_parse_links($message['body'], $node->nid, $snid);

    // Add view image.
    _simplenews_statistics_image_tag($message['body'], $node->nid, $snid);
  }
}

/**
 * Helper function to parse links in the body.
 */
function _simplenews_statistics_parse_links(&$body, $nid, $snid) {
  if (is_array($body)) {
    foreach ($body as $key => $element) {
      _simplenews_statistics_parse_links($body[$key], $nid, $snid);
    }
  }
  else {
    // @todo: Try and write some cleaner code here.
    $body = preg_replace_callback(
      '/(<a[^>]+href=")([^"]*)/mi',
      function($matches) use ($nid, $snid) {
        $value = _simplenews_statistics_replace_url($matches[2], $nid, $snid);
        return '<a href="' . $value;
      },
      $body
    );
  }
}

/**
 * Add hidden image for open statistics.
 */
function _simplenews_statistics_image_tag(&$body, $nid, $snid) {
  // @todo: Figure out why this construction was ever made.
  if (is_array($body)) {
    foreach ($body as $key => $element) {
      _simplenews_statistics_image_tag($body[$key], $nid, $snid);
      return;
    }
  }
  else {
    // Call possible encoders for the snid in modules implementing the hook.
    $hook = 'simplenews_statistics_encode_snid';
    foreach (module_implements($hook) as $module) {
      $function = $module . '_' . $hook;
      if (function_exists($function)) {
        $snid = $function($snid);
      }
    }
    $body .= '<img src="' . url('track/open/' . $nid . '/' . $snid, array('absolute' => TRUE)) . '" width="1" height="1" style="display: none;" />';
  }
}

/**
 * Alter link to go through statistics.
 */
function _simplenews_statistics_replace_url($url, $nid, $snid) {
  // Do not replace anchor links.
  $fragment_position = substr($url, 0, 1);
  if ($fragment_position == '#') {
    return $url;
  }

  // Do not replace 'mailto:' links unless it is configured.
  $track_email_address = variable_get('simplenews_statistics_track_email_address', 1);
  if ($track_email_address == 0) {
    if (substr($url, 0, 7) == 'mailto:') {
      return $url;
    }
  }

  // Get the url record from the database. Uses Drupal's static caching if
  // available. Create a new record in database and cache if there isn't one.
  $url_record = simplenews_statistics_get_url($url);
  if (FALSE === $url_record) {
    $url_record = simplenews_statistics_set_url($url, $nid);
  }

  // Call possible encoders for the urlid in modules implementing the hook.
  $hook = 'simplenews_statistics_encode_urlid';
  foreach (module_implements($hook) as $module) {
    $function = $module . '_' . $hook;
    if (function_exists($function)) {
      $url_record->urlid = $function($url_record->urlid);
    }
  }
  // Call possible encoders for the snid in modules implementing the hook.
  $hook = 'simplenews_statistics_encode_snid';
  foreach (module_implements($hook) as $module) {
    $function = $module . '_' . $hook;
    if (function_exists($function)) {
      $snid = $function($snid);
    }
  }

  return url('track/click/' . $url_record->urlid . '/' . $snid, array('absolute' => TRUE));
}

/**
 * Gets an url record.
 *
 * The caching causes a slight performance hit on our main task: redirecting
 * users. But whilst generating/sending mails it gives us a huge performance
 * gain though!
 *
 * @param string $url
 *   Complete url to search for.
 * @param bool $reset
 *   (optional) Reset cache for this URL.
 *
 * @return object || FALSE
 *   Object representing the url record or FALSE.
 */
function simplenews_statistics_get_url($url, $reset = FALSE) {
  // We don't use the magic __FUNCTION__ as parameter because we want to use the
  // static cache outside the scope of this function as well. Mainly in the
  // simplenews_statistics_set_url() function.
  $cached_urls = &drupal_static('simplenews_statistics_url');

  if (!isset($cached_urls[$url]) || $reset) {
    $query = db_select('simplenews_statistics_url', 'ssu');
    $query->fields('ssu', array('urlid'));
    $query->condition('url', $url);
    $record = $query->execute()->fetchObject();
    if ($record !== FALSE) {
      $cached_urls[$url] = $record;
      return $record;
    }
  }
  return FALSE;
}

/**
 * Creates an url record in the database.
 *
 * @param string $url
 *   The URL.
 * @param int $nid
 *   The Simplenews nid this link belongs to.
 * @return object || FALSE
 *   Object representing the url record or FALSE.
 */
function simplenews_statistics_set_url($url, $nid) {
  $record = new stdClass();
  $record->nid = $nid;
  $record->url = $url;

  $result = drupal_write_record('simplenews_statistics_url', $record);
  if ($result !== FALSE) {
    // Immediately cache the record for later use.
    $cached_urls = &drupal_static('simplenews_statistics_url');
    $cached_urls[$url] = $record;
    return $record;
  }
  return FALSE;
}

/**
 * Get open count for the given node.
 */
function simplenews_statistics_get_open_count($nid, $distinct = FALSE) {
  $query = db_select('simplenews_statistics_open', 'sso')
    ->condition('sso.nid', $nid);

  if ($distinct) {
    $query->fields('sso', array('snid'))->distinct();
  }

  return $query->countQuery()->execute()->fetchField();
}

/**
 * Get subscriber count for the given newsletter node.
 */
function simplenews_statistics_get_subscriber_count($newsletter) {
  module_load_include('inc', 'simplenews', 'includes/simplenews.admin');

  return simplenews_count_subscriptions($newsletter->tid);
}

/**
 *  Get URLs with click counts for the given newsletter node.
 */
function simplenews_statistics_get_clicks($nid) {
  $url_query = db_select('simplenews_statistics_url', 'ssu')
    ->fields('ssu', array('urlid', 'url'))
    ->condition('ssu.nid', $nid);
  $url_records = $url_query->execute()->fetchAllAssoc('urlid');

  foreach ($url_records as $record) {
    $query = db_select('simplenews_statistics_click', 'ssc')
      ->condition('ssc.urlid', $record->urlid);

    $record->clicks = $query->countQuery()->execute()->fetchField();
  }

  return $url_records;
}

function simplenews_statistics_unique_opened_and_clicked_count($nid) {
  // Number of unique subscribers who have opened a link.
  $query = db_select('simplenews_statistics_click', 'ssc')
    ->fields('ssc', array('snid'))
    ->condition('ssu.nid', $nid);
  $query->join('simplenews_statistics_url', 'ssu', 'ssu.urlid = ssc.urlid');
  $query->distinct();

  return $query->countQuery()->execute()->fetchField();
}
