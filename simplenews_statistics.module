<?php

/**
 * @file
 * Main simplenews statistics file.
 */

// @todo: find a way to use simplenews'es message caching (token replacement)

/**
 * Implements hook_menu().
 */
function simplenews_statistics_menu() {
  $items['admin/config/services/simplenews/statistics'] = array(
    'title' => 'Statistics',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_statistics_admin_settings_form'),
    'access arguments' => array('administer newsletter statistics'),
    'file' => 'simplenews_statistics.admin.inc',
  );
  $items['admin/config/services/simplenews/statistics/settings'] = array(
    'title' => 'Settings',
    'weight' => -15,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['sns/open/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'simplenews_statistics_open',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
  );
  $items['sns/click/%/%']= array(
    'type' => MENU_CALLBACK,
    'page callback' => 'simplenews_statistics_click',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function simplenews_statistics_permission() {
  $perms = array(
    'administer newsletter statistics' => array(
      'title' => t('administer newsletter statistics'),
      'description' => t('Allows to administer newsletter statistics. Give to only trusted roles.'),
    ),
    'view newsletters statistics' => array(
      'title' => t('View newsletter statistics'),
      'description' => t('Allows to access the statistics.'),
    ),
  );
  return $perms;
}

/**
 * Access for newsletter statistics.
 */
function simplenews_statistics_access($node = NULL) {
  // If the user has the global permission, allow access.
  if (user_access('view newsletters statistics')) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_node_delete(). 
 */
function simplenews_statistics_node_delete($node) {
  db_delete('simplenews_statistics_clicks')->condition('nid', $node->nid);
  db_delete('simplenews_statistics_opens')->condition('nid', $node->nid);
  db_delete('simplenews_statistics_urls')->condition('nid', $node->nid);
}

/**
 * Check and log the opens.
 */
function simplenews_statistics_open($snid) {
  // Call possible decoders for the snid in modules implementing the hook
  // Modules implementing this hook should validate this input themself because
  // we can not know what kind of string they will generate.
  $hook = 'simplenews_statistics_decode_snid';
  foreach (module_implements($hook) as $module) {
    $function = $module . '_' . $hook;
    if (function_exists($function)) {
      $snid = $function($snid);
    }
  }

  // Once decoded properly we can know for sure that the $snid is an integer.
  if (!is_int($snid)) {
    watchdog('simplenews_statistics', 'Simplenews statistics open called with illegal parameter.');
  }
  else {
    $subscriber = simplenews_subscriber_load($snid);
    if (!empty($subscriber) && !empty($subscriber[$snid])) {
      $record = new stdClass();
      $record->email = $subscriber[$snid]->mail;
      $record->nid = $subscriber[$snid]->nid;
      $record->timestamp = time();
      drupal_write_record('simplenews_statistics_opens', $record);
    }
  }

  // Render a transparent image.
  // @todo: set some more headers like cache ...
  $file = drupal_get_path('module', 'simplenews_statistics') . '/images/count.png';
  $type = 'image/png';
  header('Content-Type: '.$type);
  header('Content-Length: ' . filesize($file));
  readfile($file);
  drupal_exit();
}

/**
 * Check and log the clicks.
 * 
 * @todo: implement logic to track an open if this mails has not been opened.
 * @see: http://drupal.org/node/1310720
 */
function simplenews_statistics_click($snid, $urlid) {
  // Call possible decoders for the snid in modules implementing the hook
  // Modules implementing this hook should validate all input themself because
  // we can not know what kind of strings they will generate.
  $hook = 'simplenews_statistics_decode_snid';
  foreach (module_implements($hook) as $module) {
    $function = $module . '_' . $hook;
    if (function_exists($function)) {
      $snid = $function($snid);
    }
  }

  // Once decoded properly we can know for sure that the $snid and $urlid are
  // integers.
  if (!is_int($snid) || !is_int($urlid)) {
    watchdog('simplenews_statistics', 'Simplenews statistics click called with illegal parameter(s).');
    return FALSE;
  }
  
  // Call possible decoders for the urlid in modules implementing the hook
  $hook = 'simplenews_statistics_decode_urlid';
  foreach (module_implements($hook) as $module) {
    $function = $module . '_' . $hook;
    if (function_exists($function)) {
      $urlid = $function($urlid);
    }
  }

  $subscriber = simplenews_subscriber_load($snid);
  if (!empty($subscriber) && $subscriber->snid == $snid) {
    $query = db_select('simplenews_statistics_urls', 'ssu');
    $query->fields('ssu', array('url', 'nid'));
    $query->condition('urlid', $urlid);
    $url_record = $query->execute()->fetchAssoc();
    if (!empty($url_record) && !empty($url_record['url'])) {
      $record = new stdClass();
      $record->email = $subscriber->mail;
      $record->nid = $url_record['nid'];
      $record->urlid = $urlid;
      $record->timestamp = time();
      drupal_write_record('simplenews_statistics_clicks', $record);

      // Split the URL into it's parts for easier handling
      $path = $url_record['url'];
      $options = array(
        'fragment' => '',
        'query' => array(),
      );

      // The fragment should always be after the query, so we get that first.
      // We format it for the options array for drupal_goto().
      $fragment_position = strpos($path, '#');
      if (FALSE !== $fragment_position) {
        $fragment = substr($path, $fragment_position + 1);
        $path = str_replace('#' . $fragment, '', $path);
        $options['fragment'] = $fragment;
      }
      // Determine the position of the query string, get it, delete it from the
      // original path and then we explode the parts and the key-value pairs to
      // get a clean output that we can use in drupal_goto().
      $query_position = strpos($path, '?');
      if (FALSE !== $query_position) {
        $query = substr($path, $query_position + 1);
        $path = str_replace('?' . $query, '', $path);
        $element = explode('&', $query);
        foreach ($element as $pair) {
          $pair = explode('=', $pair);
          if (!isset($pair[1])) {
            $pair[1] = '';
          }
          $options['query'][$pair[0]] = $pair[1];
        }
      }

      // Call possible rewriters for the url
      $hook = 'simplenews_statistics_rewrite_goto_url';
      foreach (module_implements($hook) as $module) {
        $function = $module . '_' . $hook;
        if (function_exists($function)) {
          $function($path, $options, $snid, $url_record['nid']);
        }
      }
      
      // Fragment behaviour can get out of spec
      drupal_goto($path, $options);
    }
  }

  // Fallback on any error is to go to the homepage
  drupal_goto();
}

/**
 * Implements hook_mail_alter().
 *
 * Adds a hidden image to the body and counts the amount of emails send.
 */
function simplenews_statistics_mail_alter(&$message) {
  if (($message['id'] == 'simplenews_node' || $message['id'] == 'simplenews_test')) {
    $node = $message['params']['simplenews_source']->getNode();
    $subscriber = $message['params']['simplenews_source']->getSubscriber();

    // Parse body.
    _simplenews_statistics_parse_links($message['body'], $node->nid, $subscriber->snid);

    // Add view image.
    _simplenews_statistics_image_tag($message['body'], $node->nid, $subscriber->snid);
  }
}

/**
 * Parse links in the body.
 */
function _simplenews_statistics_parse_links(&$body, $nid, $snid) {
  if (is_array($body)) {
    foreach ($body as $key => $element) {
      _simplenews_statistics_parse_links($body[$key], $nid, $snid);
    }
  }
  else {
    // Replace links.
    // @todo: try and write some cleaner code here
    $pattern = '/(<a[^>]+href=")([^"]*)/emi';
    $body = preg_replace($pattern, '"\\1"._simplenews_statistics_replace_url("\2", $nid, $snid)', $body);
  }
}

/**
 * Add hidden image for view statistics.
 */
function _simplenews_statistics_image_tag(&$body, $nid, $snid) {
  if (is_array($body)) {
    foreach ($body as $key => $element) {
      _simplenews_statistics_image_tag($body[$key], $nid, $snid);
      return; // Only once.
    }
  }
  else {
    // Call possible encoders for the snid in modules implementing the hook
    $hook = 'simplenews_statistics_encode_snid';
    foreach (module_implements($hook) as $module) {
      $function = $module . '_' . $hook;
      if (function_exists($function)) {
        $snid = $function($snid);
      }
    }
    $body .= '<img src="' . url('sns/open/' . $snid,  array('absolute' => TRUE)) . '" width="1" height="1" style="display: none;" />';
  }
}

/**
 * Alter link to go through statistics.
 */
function _simplenews_statistics_replace_url($url, $nid, $snid) {
  // Do not replace anchor-links
  if (substr($url, 0, 1) == '#')
    return $url;

  // Do not replace mailto-links unless it is configured.
  $track_emailaddress = variable_get('simplenews_statistics_track_emailaddress', 1);
  if ($track_emailaddress == 0) {
    if (substr($url, 0, 7) == 'mailto:') {
      return $url;
    }
  }

  // Check if the URL already exists, if not create it
  // @todo: Add some caching mechanism to drastically reduce database load.
  $query = db_select('simplenews_statistics_urls', 'ssu');
  $query->fields('ssu', array('urlid'));
  $query->condition('url', $url);
  $record = $query->execute()->fetchAssoc();
  if (!empty($record) && !empty($record['urlid'])) {
    $urlid = $record['urlid'];
  }
  else {
    $record = new stdClass();
    $record->nid = $nid;
    $record->url = $url;
    drupal_write_record('simplenews_statistics_urls', $record);
    $urlid = $record->urlid;
  }

  // Call possible encoders for the snid in modules implementing the hook
  $hook = 'simplenews_statistics_encode_snid';
  foreach (module_implements($hook) as $module) {
    $function = $module . '_' . $hook;
    if (function_exists($function)) {
      $snid = $function($snid);
    }
  }

  // Call possible encoders for the urlid in modules implementing the hook
  $hook = 'simplenews_statistics_encode_urlid';
  foreach (module_implements($hook) as $module) {
    $function = $module . '_' . $hook;
    if (function_exists($function)) {
      $urlid = $function($urlid);
    }
  }

  return url('sns/click/' . $snid . '/' . $urlid,  array('absolute' => TRUE));
}

/**
 * Implements hook_views_api().
 */
function simplenews_statistics_views_api() {
  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'simplenews_statistics') . '/includes/views',
  );
}
